// Base error type for all errors generated by this library.
export class LibraryError extends Error {
  constructor(message, options) {
    super(message, options);
    this.name = "LibraryError";
  }
  get detail() {
    return {
      type: `https://docs.applura.com/client/v2/errors#${this.name}`,
      title: this.name,
      detail: this.message,
    };
  }
}

// Raised when the implementation of this library has caused an error. For example, when a known edge case has not been
// handled.
export class ImplementationError extends LibraryError {
  constructor(message, options) {
    super(message, options);
    this.name = "ImplementationError";
  }
}

// Raised when the library detects a user error.
export class UsageError extends LibraryError {
  constructor(message, options) {
    super(message, options);
    this.name = "UsageError";
  }
}

// Raised when an HTTP response is in error, i.e. for HTTP status codes >=400.
export class HTTPError extends LibraryError {
  constructor(message, { response, ...options }) {
    super(message, options);
    this.name = "RequestError";
    Object.defineProperty(this, "response", { value: response });
  }
  get detail() {
    return {
      ...super.detail,
      status: this.response.status,
    };
  }
}

// Raised when an HTTP request causes an HTTP client error, i.e. for HTTP status codes >=400 and <=499.
export class RequestError extends HTTPError {
  constructor(message, options) {
    super(message, options);
    this.name = "RequestError";
  }
}

// Raised when an HTTP response causes an error.
export class ResponseError extends HTTPError {
  constructor(message, options) {
    super(message, options);
    this.name = "ResponseError";
  }
}

// Raised when served an HTTP server error, i.e. when it has a status code >= 500.
export class ServerError extends ResponseError {
  constructor(message, options) {
    super(message, options);
    this.name = "ServerError";
  }
}

// Raised when served an OK response with unexpected body content.
export class UnprocessableResponseError extends ResponseError {
  constructor(message, { response, ...options }) {
    super(message, {
      ...options,
      response,
      doc: {
        value: undefined,
        get() {
          throw new UsageError(
            `${this.name} does not have a doc property because the response could not be processed`,
          );
        },
      },
    });
    this.name = "ResponseBodyError";
  }
}

// Raised when served an HTTP response with a body and no content-type header.
export class MissingContentTypeError extends UnprocessableResponseError {
  constructor(message, options) {
    super(message, options);
    this.name = "MissingContentTypeError";
  }
}

// Raised when served an HTTP response with a body and an unrecognized content-type header.
export class UnexpectedContentTypeError extends UnprocessableResponseError {
  constructor(message, options) {
    super(message, options);
    this.name = "UnexpectedContentTypeError";
  }
}

// Raised when served an HTTP response body cannot be parsed as expected.
export class UnexpectedContentError extends UnprocessableResponseError {
  constructor(message, options) {
    super(message, options);
    this.name = "UnexpectedContentError";
  }
}
